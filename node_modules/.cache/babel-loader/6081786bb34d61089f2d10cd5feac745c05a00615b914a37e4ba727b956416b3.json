{"ast":null,"code":"import { db } from './firebaseConfig';\nimport { doc, getDoc } from \"firebase/firestore\";\nconst calculateBalances = async projectName => {\n  const projectRef = doc(db, \"projects\", projectName);\n  const projectDoc = await getDoc(projectRef);\n  if (!projectDoc.exists()) {\n    throw new Error('プロジェクトが見つかりません');\n  }\n  const projectData = projectDoc.data();\n  const members = projectData.members;\n  const expenses = projectData.expenses || [];\n  const balances = {};\n\n  // Initialize balances\n  members.forEach(member => {\n    balances[member] = 0;\n  });\n\n  // Calculate balances\n  expenses.forEach(expense => {\n    const {\n      payer,\n      amount,\n      payees\n    } = expense;\n    const splitAmount = amount / payees.length;\n    balances[payer] += amount;\n    payees.forEach(payee => {\n      balances[payee] -= splitAmount;\n    });\n  });\n\n  // Round balances to the nearest integer\n  for (const member in balances) {\n    balances[member] = Math.round(balances[member]);\n  }\n  return balances;\n};\nconst calculateTransfers = balances => {\n  const creditors = [];\n  const debtors = [];\n\n  // Separate creditors and debtors\n  for (const [member, balance] of Object.entries(balances)) {\n    if (balance > 0) {\n      creditors.push({\n        member,\n        balance\n      });\n    } else if (balance < 0) {\n      debtors.push({\n        member,\n        balance: -balance\n      });\n    }\n  }\n  const transfers = [];\n\n  // Calculate transfers\n  while (creditors.length > 0 && debtors.length > 0) {\n    const creditor = creditors[0];\n    const debtor = debtors[0];\n    const transferAmount = Math.min(creditor.balance, debtor.balance);\n    transfers.push({\n      from: debtor.member,\n      to: creditor.member,\n      amount: transferAmount\n    });\n    creditor.balance -= transferAmount;\n    debtor.balance -= transferAmount;\n    if (creditor.balance === 0) {\n      creditors.shift();\n    }\n    if (debtor.balance === 0) {\n      debtors.shift();\n    }\n  }\n  return transfers;\n};\nexport { calculateBalances, calculateTransfers };","map":{"version":3,"names":["db","doc","getDoc","calculateBalances","projectName","projectRef","projectDoc","exists","Error","projectData","data","members","expenses","balances","forEach","member","expense","payer","amount","payees","splitAmount","length","payee","Math","round","calculateTransfers","creditors","debtors","balance","Object","entries","push","transfers","creditor","debtor","transferAmount","min","from","to","shift"],"sources":["C:/Users/ru07k/test/warikan/warikan/src/calculate.js"],"sourcesContent":["import { db } from './firebaseConfig';\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\nconst calculateBalances = async (projectName) => {\r\n  const projectRef = doc(db, \"projects\", projectName);\r\n  const projectDoc = await getDoc(projectRef);\r\n\r\n  if (!projectDoc.exists()) {\r\n    throw new Error('プロジェクトが見つかりません');\r\n  }\r\n\r\n  const projectData = projectDoc.data();\r\n  const members = projectData.members;\r\n  const expenses = projectData.expenses || [];\r\n\r\n  const balances = {};\r\n\r\n  // Initialize balances\r\n  members.forEach(member => {\r\n    balances[member] = 0;\r\n  });\r\n\r\n  // Calculate balances\r\n  expenses.forEach(expense => {\r\n    const { payer, amount, payees } = expense;\r\n    const splitAmount = amount / payees.length;\r\n\r\n    balances[payer] += amount;\r\n    payees.forEach(payee => {\r\n      balances[payee] -= splitAmount;\r\n    });\r\n  });\r\n\r\n  // Round balances to the nearest integer\r\n  for (const member in balances) {\r\n    balances[member] = Math.round(balances[member]);\r\n  }\r\n\r\n  return balances;\r\n};\r\n\r\nconst calculateTransfers = (balances) => {\r\n  const creditors = [];\r\n  const debtors = [];\r\n\r\n  // Separate creditors and debtors\r\n  for (const [member, balance] of Object.entries(balances)) {\r\n    if (balance > 0) {\r\n      creditors.push({ member, balance });\r\n    } else if (balance < 0) {\r\n      debtors.push({ member, balance: -balance });\r\n    }\r\n  }\r\n\r\n  const transfers = [];\r\n\r\n  // Calculate transfers\r\n  while (creditors.length > 0 && debtors.length > 0) {\r\n    const creditor = creditors[0];\r\n    const debtor = debtors[0];\r\n\r\n    const transferAmount = Math.min(creditor.balance, debtor.balance);\r\n\r\n    transfers.push({\r\n      from: debtor.member,\r\n      to: creditor.member,\r\n      amount: transferAmount\r\n    });\r\n\r\n    creditor.balance -= transferAmount;\r\n    debtor.balance -= transferAmount;\r\n\r\n    if (creditor.balance === 0) {\r\n      creditors.shift();\r\n    }\r\n\r\n    if (debtor.balance === 0) {\r\n      debtors.shift();\r\n    }\r\n  }\r\n\r\n  return transfers;\r\n};\r\n\r\nexport { calculateBalances, calculateTransfers };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}