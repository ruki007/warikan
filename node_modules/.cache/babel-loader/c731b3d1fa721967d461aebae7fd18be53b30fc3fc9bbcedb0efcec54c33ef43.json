{"ast":null,"code":"import{db}from'./firebaseConfig';import{doc,getDoc}from\"firebase/firestore\";const calculateBalances=async projectName=>{const projectRef=doc(db,\"projects\",projectName);const projectDoc=await getDoc(projectRef);if(!projectDoc.exists()){throw new Error('プロジェクトが見つかりません');}const projectData=projectDoc.data();const members=projectData.members;const expenses=projectData.expenses||[];const balances={};// Initialize balances\nmembers.forEach(member=>{balances[member]=0;});// Calculate balances\nexpenses.forEach(expense=>{const{payer,amount,payees}=expense;const splitAmount=amount/payees.length;balances[payer]+=amount;payees.forEach(payee=>{balances[payee]-=splitAmount;});});// Round balances to the nearest integer\nfor(const member in balances){balances[member]=Math.round(balances[member]);}return balances;};const calculateTransfers=balances=>{const creditors=[];const debtors=[];// Separate creditors and debtors\nfor(const[member,balance]of Object.entries(balances)){if(balance>0){creditors.push({member,balance});}else if(balance<0){debtors.push({member,balance:-balance});}}const transfers=[];// Calculate transfers\nwhile(creditors.length>0&&debtors.length>0){const creditor=creditors[0];const debtor=debtors[0];const transferAmount=Math.min(creditor.balance,debtor.balance);transfers.push({from:debtor.member,to:creditor.member,amount:transferAmount});creditor.balance-=transferAmount;debtor.balance-=transferAmount;if(creditor.balance===0){creditors.shift();}if(debtor.balance===0){debtors.shift();}}return transfers;};export{calculateBalances,calculateTransfers};","map":{"version":3,"names":["db","doc","getDoc","calculateBalances","projectName","projectRef","projectDoc","exists","Error","projectData","data","members","expenses","balances","forEach","member","expense","payer","amount","payees","splitAmount","length","payee","Math","round","calculateTransfers","creditors","debtors","balance","Object","entries","push","transfers","creditor","debtor","transferAmount","min","from","to","shift"],"sources":["C:/Users/ru07k/test/warikan/src/calculate.js"],"sourcesContent":["import { db } from './firebaseConfig';\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\nconst calculateBalances = async (projectName) => {\r\n  const projectRef = doc(db, \"projects\", projectName);\r\n  const projectDoc = await getDoc(projectRef);\r\n\r\n  if (!projectDoc.exists()) {\r\n    throw new Error('プロジェクトが見つかりません');\r\n  }\r\n\r\n  const projectData = projectDoc.data();\r\n  const members = projectData.members;\r\n  const expenses = projectData.expenses || [];\r\n\r\n  const balances = {};\r\n\r\n  // Initialize balances\r\n  members.forEach(member => {\r\n    balances[member] = 0;\r\n  });\r\n\r\n  // Calculate balances\r\n  expenses.forEach(expense => {\r\n    const { payer, amount, payees } = expense;\r\n    const splitAmount = amount / payees.length;\r\n\r\n    balances[payer] += amount;\r\n    payees.forEach(payee => {\r\n      balances[payee] -= splitAmount;\r\n    });\r\n  });\r\n\r\n  // Round balances to the nearest integer\r\n  for (const member in balances) {\r\n    balances[member] = Math.round(balances[member]);\r\n  }\r\n\r\n  return balances;\r\n};\r\n\r\nconst calculateTransfers = (balances) => {\r\n  const creditors = [];\r\n  const debtors = [];\r\n\r\n  // Separate creditors and debtors\r\n  for (const [member, balance] of Object.entries(balances)) {\r\n    if (balance > 0) {\r\n      creditors.push({ member, balance });\r\n    } else if (balance < 0) {\r\n      debtors.push({ member, balance: -balance });\r\n    }\r\n  }\r\n\r\n  const transfers = [];\r\n\r\n  // Calculate transfers\r\n  while (creditors.length > 0 && debtors.length > 0) {\r\n    const creditor = creditors[0];\r\n    const debtor = debtors[0];\r\n\r\n    const transferAmount = Math.min(creditor.balance, debtor.balance);\r\n\r\n    transfers.push({\r\n      from: debtor.member,\r\n      to: creditor.member,\r\n      amount: transferAmount\r\n    });\r\n\r\n    creditor.balance -= transferAmount;\r\n    debtor.balance -= transferAmount;\r\n\r\n    if (creditor.balance === 0) {\r\n      creditors.shift();\r\n    }\r\n\r\n    if (debtor.balance === 0) {\r\n      debtors.shift();\r\n    }\r\n  }\r\n\r\n  return transfers;\r\n};\r\n\r\nexport { calculateBalances, calculateTransfers };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}